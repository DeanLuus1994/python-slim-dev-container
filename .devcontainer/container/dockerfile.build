# syntax=docker/dockerfile:1.4

FROM python:3.12-slim AS builder-base

# Build arguments for customization
ARG BUILDKIT_INLINE_CACHE=1
ARG DEBIAN_FRONTEND=noninteractive
ARG PYTHON_VERSION=3.12
ARG CMAKE_BUILD_PARALLEL_LEVEL=4
ARG CCACHE_DIR=/.ccache
ARG CCACHE_MAXSIZE=5G

# Use compiler optimization flags that match functions/optimization/compiler.py
ARG CFLAGS="-O3 -march=x86-64 -mtune=generic"
ARG CXXFLAGS="-O3 -march=x86-64 -mtune=generic"
ARG LDFLAGS="-Wl,-O1 -Wl,--as-needed"

# Set environment variables for build optimization
ENV CCACHE_DIR=${CCACHE_DIR} \
    CCACHE_COMPRESS=1 \
    CCACHE_COMPRESSLEVEL=9 \
    CCACHE_MAXSIZE=${CCACHE_MAXSIZE} \
    CFLAGS=${CFLAGS} \
    CXXFLAGS=${CXXFLAGS} \
    LDFLAGS=${LDFLAGS} \
    CMAKE_BUILD_PARALLEL_LEVEL=${CMAKE_BUILD_PARALLEL_LEVEL} \
    PATH="/usr/lib/ccache:$PATH" \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=0 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install essential build dependencies with efficient caching
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    ccache \
    cmake \
    curl \
    gcc \
    g++ \
    git \
    git-lfs \
    libblas-dev \
    liblapack-dev \
    libopenblas-dev \
    make \
    ninja-build \
    pkg-config \
    python3-dev \
    python3-pip \
    && apt-get clean

# Set up ccache with optimal settings to match setup_ccache in compiler.py
RUN mkdir -p ${CCACHE_DIR} && \
    echo "max_size = ${CCACHE_MAXSIZE}" > ${CCACHE_DIR}/ccache.conf && \
    echo "compression = true" >> ${CCACHE_DIR}/ccache.conf && \
    echo "compression_level = 9" >> ${CCACHE_DIR}/ccache.conf && \
    echo "hash_dir = false" >> ${CCACHE_DIR}/ccache.conf && \
    echo "sloppiness = file_macro,time_macros,include_file_mtime,include_file_ctime,file_stat_matches" >> ${CCACHE_DIR}/ccache.conf && \
    chmod -R 777 ${CCACHE_DIR}

# Install Python build tools with cache to speed up future builds
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip setuptools wheel && \
    pip install build Cython pybind11 meson-python

# Stage for building numpy/scipy optimized for the system
FROM builder-base AS scientific-builder
ARG CCACHE_DIR=/.ccache
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
    --mount=type=cache,target=${CCACHE_DIR},sharing=locked \
    pip install --no-cache-dir numpy && \
    pip install --no-cache-dir scipy

# Stage for ML libraries
FROM builder-base AS ml-builder
ARG CCACHE_DIR=/.ccache
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
    --mount=type=cache,target=${CCACHE_DIR},sharing=locked \
    pip install --index-url https://download.pytorch.org/whl/cpu torch && \
    pip install transformers

# Create a merged builder with all built wheels
FROM builder-base AS merged-builder
COPY --from=scientific-builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=ml-builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages

# Final optimization - strip binaries to reduce size (matches binary.py strip_binaries function)
RUN find /usr/local/lib/python3.12/site-packages -name "*.so" -exec strip -s {} \; || true

# Pre-compile Python packages to bytecode (matching compile_python_bytecode function)
RUN python -m compileall -f -q /usr/local/lib/python3.12/site-packages

# Export the ccache for subsequent builds
VOLUME ${CCACHE_DIR}